Module modProcInfo
Option Explicit
'*******************************************************************************************
'modProcInfo  - Process information from pid.
'
'(revision 3, 2022/07/27) (c)2022 fafalone
'
'This is designed for high performance random bulk lookups of process names/paths
'given their pid or a thread id from them. It maintains a cache of previous lookups
'that is checked first.
'
'There are 5 public methods:
'
'     GetProcessInfoFromPID - Given a process id, sets arguments pointing to the
'                             executable name and the full path. Returns True if successful.
'
'
'  PrebuildFullProcessCache - To be called at loading or before heavy processing starts, this
'                             caches all currently running processes, so only new ones need
'                             to be looked up.
'
'           EnsurePidCached - If you know you'll need info about a pid, but not yet, cache it.
'
'    InvalidateProcessCache - Clears the pid info cache.
'
'          GetPidFromTidCTS - An extra utility function to get a process id from a thread id,
'                             in case one needed to support XP or wanted an alternative if
'                             GetProcessIdOfThread failed.
'
'WARNING: Thread IDs and Process IDs are reused. You cannot rely on them forever. This
'         is currently designed for short term use; in the future, there will be a mechanism
'         to add/remove processes and threads based on those events.
'
Public ProcInfoNoCache As Boolean 'Set this to True to disable caching if you're having
                                  'issues with pid reuse as a temporary mitigation.
                                  
Public ProcInfoGetCommandLine As Boolean 'Retrieve the full command line for the process.
                                         'This requires the SeDebugPrivilege to be enabled.
'*******************************************************************************************

Private Type CachedProcess
    pid As Long
    ProgName As String
    FullPath As String
    CommandLine As string
    iIcon As Long
End Type
Private ProcessCache() As CachedProcess
Private nCached As Long

Private Enum TH32CS_Flags
    TH32CS_SNAPHEAPLIST = &H1
    TH32CS_SNAPPROCESS = &H2
    TH32CS_SNAPTHREAD = &H4
    TH32CS_SNAPMODULE = &H8
    TH32CS_SNAPALL = (TH32CS_SNAPHEAPLIST Or TH32CS_SNAPPROCESS Or TH32CS_SNAPTHREAD Or TH32CS_SNAPMODULE)
    TH32CS_INHERIT = &H80000000
End Enum

Private Enum PriorityClass
    NORMAL_PRIORITY_CLASS = &H20
    IDLE_PRIORITY_CLASS = &H40
    HIGH_PRIORITY_CLASS = &H80
    REALTIME_PRIORITY_CLASS = &H100
    BELOW_NORMAL_PRIORITY_CLASS = &H4000
    ABOVE_NORMAL_PRIORITY_CLASS = &H8000
End Enum

Private Type THREADENTRY32
    dwSize As Long
    cntUsage As Long
    th32ThreadID As Long
    th32OwnerProcessID As Long
    tpBasePri As Long
    tpDeltaPri As Long
    dwFlags As Long
End Type

Private Type PROCESSENTRY32W
    dwSize As Long
    cntUsage As Long
    th32ProcessID As Long
    th32DefaultHeapID As LongPtr
    th32ModuleID As Long
    cntThreads As Long
    th32ParentProcessID As Long
    pcPriClassBase As PriorityClass
    dwFlags As Long
    szExeFile (0 To (MAX_PATH - 1)) As Integer
End Type

Private Type UNICODE_STRING
    uLength As Integer
    uMaximumLength As Integer
    pBuffer As LongPtr
End Type

Private Enum PROCESSINFOCLASS
    ProcessBasicInformation = &H00
    ProcessQuotaLimits = &H01
    ProcessIoCounters = &H02
    ProcessVmCounters = &H03
    ProcessTimes = &H04
    ProcessBasePriority = &H05
    ProcessRaisePriority = &H06
    ProcessDebugPort = &H07
    ProcessExceptionPort = &H08
    ProcessAccessToken = &H09
    ProcessLdtInformation = &H0A
    ProcessLdtSize = &H0B
    ProcessDefaultHardErrorMode = &H0C
    ProcessIoPortHandlers = &H0D
    ProcessPooledUsageAndLimits = &H0E
    ProcessWorkingSetWatch = &H0F
    ProcessUserModeIOPL = &H10
    ProcessEnableAlignmentFaultFixup = &H11
    ProcessPriorityClass = &H12
    ProcessWx86Information = &H13
    ProcessHandleCount = &H14
    ProcessAffinityMask = &H15
    ProcessPriorityBoost = &H16
    ProcessDeviceMap = &H17
    ProcessSessionInformation = &H18
    ProcessForegroundInformation = &H19
    ProcessWow64Information = &H1A
    ProcessImageFileName = &H1B
    ProcessLUIDDeviceMapsEnabled = &H1C
    ProcessBreakOnTermination = &H1D
    ProcessDebugObjectHandle = &H1E
    ProcessDebugFlags = &H1F
    ProcessHandleTracing = &H20
    ProcessIoPriority = &H21
    ProcessExecuteFlags = &H22
    ProcessResourceManagement = &H23
    ProcessCookie = &H24
    ProcessImageInformation = &H25
    ProcessCycleTime = &H26
    ProcessPagePriority = &H27
    ProcessInstrumentationCallback = &H28
    ProcessThreadStackAllocation = &H29
    ProcessWorkingSetWatchEx = &H2A
    ProcessImageFileNameWin32 = &H2B
    ProcessImageFileMapping = &H2C
    ProcessAffinityUpdateMode = &H2D
    ProcessMemoryAllocationMode = &H2E
    ProcessGroupInformation = &H2F
    ProcessTokenVirtualizationEnabled = &H30
    ProcessConsoleHostProcess = &H31
    ProcessWindowInformation = &H32
    ProcessHandleInformation = &H33
    ProcessMitigationPolicy = &H34
    ProcessDynamicFunctionTableInformation = &H35
    ProcessHandleCheckingMode = &H36
    ProcessKeepAliveCount = &H37
    ProcessRevokeFileHandles = &H38
    ProcessWorkingSetControl = &H39
    ProcessHandleTable = &H3A
    ProcessCheckStackExtentsMode = &H3B
    ProcessCommandLineInformation = &H3C
    ProcessProtectionInformation = &H3D
    ProcessMemoryExhaustion = &H3E
    ProcessFaultInformation = &H3F
    ProcessTelemetryIdInformation = &H40
    ProcessCommitReleaseInformation = &H41
    ProcessDefaultCpuSetsInformation = &H42
    ProcessAllowedCpuSetsInformation = &H43
    ProcessSubsystemProcess = &H44
    ProcessJobMemoryInformation = &H45
    ProcessInPrivate = &H46
    ProcessRaiseUMExceptionOnInvalidHandleClose = &H47
    ProcessIumChallengeResponse = &H48
    ProcessChildProcessInformation = &H49
    ProcessHighGraphicsPriorityInformation = &H4A
    ProcessSubsystemInformation = &H4B
    ProcessEnergyValues = &H4C
    ProcessActivityThrottleState = &H4D
    ProcessActivityThrottlePolicy = &H4E
    ProcessWin32kSyscallFilterInformation = &H4F
    ProcessDisableSystemAllowedCpuSets = &H50
    ProcessWakeInformation = &H51
    ProcessEnergyTrackingState = &H52
    ProcessManageWritesToExecutableMemory = &H53
    ProcessCaptureTrustletLiveDump = &H54
    ProcessTelemetryCoverage = &H55
    ProcessEnclaveInformation = &H56
    ProcessEnableReadWriteVmLogging = &H57
    ProcessUptimeInformation = &H58
    ProcessImageSection = &H59
    ProcessDebugAuthInformation = &H5A
    ProcessSystemResourceManagement = &H5B
    ProcessSequenceNumber = &H5C
    ProcessLoaderDetour = &H5D
    ProcessSecurityDomainInformation = &H5E
    ProcessCombineSecurityDomainsInformation = &H5F
    ProcessEnableLogging = &H60
    ProcessLeapSecondInformation = &H61
    ProcessFiberShadowStackAllocation = &H62
    ProcessFreeFiberShadowStackAllocation = &H63
    MaxProcessInfoClass = &H64
End Enum
Private Type PROCESS_BASIC_INFORMATION
    ExitStatus                      As Long
    Reserved0                       As Long
    PebBaseAddress                  As LongPtr
    AffinityMask                    As LongPtr
    BasePriority                    As Long
    Reserved1                       As Long
    uUniqueProcessId                As LongPtr
    uInheritedFromUniqueProcessId   As LongPtr
End Type
Private Type RTL_DRIVE_LETTER_CURDIR
    Flags As Integer
    Length As Integer
    TimeStamp As Long
    DosPath As UNICODE_STRING
End Type
Private Type CURDIR
	DosPath As UNICODE_STRING
    Handle As LongPtr
End Type
Private Type LIST_ENTRY
    Flink As LongPtr
    Blink As LongPtr
End Type

Private Type RTL_USER_PROCESS_PARAMETERS
    MaximumLength As Long
    Length As Long
    Flags As Long
    DebugFlags As Long
    ConsoleHandle As LongPtr
    ConsoleFlags As Long
    StdInputHandle As LongPtr
    StdOutputHandle As LongPtr
    StdErrorHandle As LongPtr
    CurrentDirectory As CURDIR
    DllPath As UNICODE_STRING
    ImagePathName As UNICODE_STRING
    CommandLine As UNICODE_STRING
    Environment As LongPtr
    StartingPositionLeft As Long
    StartingPositionTop As Long
    Width As Long
    Height As Long
    CharWidth As Long
    CharHeight As Long
    ConsoleTextAttributes As Long
    WindowFlags As Long
    ShowWindowFlags As Long
    WindowTitle As UNICODE_STRING
    DesktopName As UNICODE_STRING
    ShellInfo As UNICODE_STRING
    RuntimeData As UNICODE_STRING
    DLCurrentDirectory(31) As RTL_DRIVE_LETTER_CURDIR
    EnvironmentSize As LongLong
    'Windows Vista stops here, so we will as well as that's our compatibility target.
End Type
Private Type PEB
    InheritedAddressSpace As Byte
    ReadImageFileExecOptions As Byte
    BeingDebugged As Byte
    BitField As Byte
    Mutant As LongPtr
    ImageBaseAddress As LongPtr
    Ldr As LongPtr
    ProcessParameters As LongPtr 'RTL_USER_PROCESS_PARAMETERS, what we're primarily interested in.
    SubSystemData As LongPtr
    ProcessHeap As LongPtr
    FastPebLock As LongPtr
    AtlThinkSListPtr As LongPtr
    IFEOKey As LongPtr
    CrossProcessFlags As Long
    CBTableOrInfoPtr As LongPtr
    SystemReserved(0) As Long
    AtlThunkSListPtr32 As Long
    ApiSetMap As LongPtr
    TlsExpansionCounter As Long
    TlsBitmap As LongPtr
    TlsBitmaps(1) As Long
    ReadOnlySharedMemoryBase As LongPtr
    HotpatchInformation As LongPtr
    ReadOnlyStaticServerData As LongPtr
    AnsiCodePageData As LongPtr
    OemCodePageData As LongPtr
    UnicodeCaseTableData As LongPtr
    NumberOfProcessors As Long
    NtGlobalFlag As Long
    CriticalSectionTimeout As LARGE_INTEGER
    HeapSegmentReserve As LongLong
    HeapSegmentCommit As LongLong
    HeapDeCommitTotalFreeThreshold As LongLong
    HeapDeCommitFreeBlockThreshold As LongLong
    NumberOfHeaps As Long
    MaximumNumberOfHeaps As Long
    ProcessHeaps As LongPtr
    GdiSharedHandleTable As LongPtr
    ProcessStarterHelper As LongPtr
    GdiDCAttributeList As Long
    LoaderLock As LongPtr
    OSMajorVersion As Long
    OSMinorVersion As Long
    OSBuildNumber As Integer
    OSCSDVersion As Integer
    OSPlatformId As Long
    ImageSubsystem As Long
    ImageSubsystemMajorVersion As Long
    ImageSubsystemMinorVersion As Long
    ImageProcessAffinityMask As LongLong
    GdiHandleBuffer(59) As Long
    PostProcessInitRoutine As LongPtr
    TlsExpansionBitmap As LongPtr
    TlsExpansionBitmapBits(31) As Long
    SessionId As Long
    AppCompatFlags As LARGE_INTEGER
    AppCompatFlagUser As LARGE_INTEGER
    pShimData As LongPtr
    AppCompatInfo As LongPtr
    CSDVersion As UNICODE_STRING
    ActivationContextData As LongPtr
    ProcessAssemblyStorageMap As LongPtr
    SystemDefaultActivationContextData As LongPtr
    SystemAssemblyStorageMap As LongPtr
    MinimumStackCommit As Long
    FlsCallback As LongPtr
    FlsListHead As LIST_ENTRY
    FlsBitmap As LongPtr
    FlsBitmapBits(3) As Long
    FlsHighIndex As Long
    'Vista+
    WerRegistrationData As LongPtr
    WerShipAssertPtr As LongPtr
    'Believe it or not, future OS' have *even more* members. But Vista stops here, so we will too. 
End Type

Private Const STANDARD_RIGHTS_REQUIRED = &HF0000
Private Const SYNCHRONIZE As Long = &H100000
Private Const INVALID_HANDLE_VALUE = -1&

Private Const PROCESS_ALL_ACCESS As Long = (STANDARD_RIGHTS_REQUIRED Or SYNCHRONIZE Or &HFFF&)
Private Const PROCESS_TERMINATE = &H1 ' Enables using the process handle in the TerminateProcess function to terminate the process.
Private Const PROCESS_CREATE_THREAD = &H2   ' Enables using the process handle in the CreateRemoteThread function to create a thread in the process.
Private Const PROCESS_VM_OPERATION = &H8 ' Enables using the process handle in the VirtualProtectEx and WriteProcessMemory functions to modify the virtual memory of the process.
Private Const PROCESS_VM_READ = &H10     ' Enables using the process handle in the ReadProcessMemory function to read from the virtual memory of the process.
Private Const PROCESS_VM_WRITE = &H20 ' Enables using the process handle in the WriteProcessMemory function to write to the virtual memory of the process.
Private Const PROCESS_DUP_HANDLE = &H40   ' Enables using the process handle as either the source or target process in the DuplicateHandle function to duplicate a handle
Private Const PROCESS_SET_INFORMATION = &H200 ' Enables using the process handle in the SetPriorityClass function to set the priority class of the process.
Private Const PROCESS_QUERY_INFORMATION = &H400 ' Enables using the process handle in the GetExitCodeProcess and GetPriorityClass functions to read information from the process object.
Private Const PROCESS_QUERY_LIMITED_INFORMATION = &H1000

Private Declare PtrSafe Function CreateToolhelp32Snapshot Lib "kernel32" (ByVal dwFlags As TH32CS_Flags, ByVal th32ProcessID As Long) As LongPtr
Private Declare PtrSafe Function Process32FirstW Lib "kernel32.dll" (ByVal hSnapshot As LongPtr, lppe As PROCESSENTRY32W) As Long
Private Declare PtrSafe Function Process32NextW Lib "kernel32.dll" (ByVal hSnapshot As LongPtr, lppe As PROCESSENTRY32W) As Long
Private Declare PtrSafe Function Thread32First Lib "kernel32" (ByVal hSnapshot As LongPtr, lpTE As THREADENTRY32) As Long
Private Declare PtrSafe Function Thread32Next Lib "kernel32" (ByVal hSnapshot As LongPtr, lpTE As THREADENTRY32) As Long
Private Declare PtrSafe Function OpenProcess Lib "kernel32" (ByVal dwDesiredAccess As Long, ByVal bInheritHandle As Long, ByVal dwProcessId As Long) As LongPtr
Private Declare PtrSafe Function CloseHandle Lib "kernel32" (ByVal hObject As LongPtr) As Long
Private Declare PtrSafe Function QueryFullProcessImageName Lib "kernel32" Alias "QueryFullProcessImageNameW" (ByVal hProcess As LongPtr, ByVal dwFlags As Long, ByVal lpExeName As LongPtr, lpdwSize As Long) As Long
Private Declare PtrSafe Function NtQueryInformationProcess Lib "ntdll" (ByVal ProcessHandle As LongPtr, ByVal ProcessInformationClass As Long, ProccessInformation As Any, ByVal ProcessInformationLength As Long, ReturnLength As Long) As Long
Private Declare PtrSafe Function ReadProcessMemory Lib "kernel32" (ByVal hProcess As LongPtr, ByVal lpBaseAddress As LongPtr, lpBuffer As Any, ByVal nSize As LongPtr, lpNumberOfBytesRead As LongPtr) As Long


Private Declare PtrSafe Function SHGetFileInfo Lib "shell32" Alias "SHGetFileInfoA" (ByVal pszPath As Any, ByVal dwFileAttributes As Long, psfi As SHFILEINFO, ByVal cbFileInfo As Long, ByVal uFlags As SHGFI_flags) As LongPtr
Private Enum SHGFI_flags
  SHGFI_LARGEICON = &H0            ' sfi.hIcon is large icon
  SHGFI_SMALLICON = &H1            ' sfi.hIcon is small icon
  SHGFI_OPENICON = &H2              ' sfi.hIcon is open icon
  SHGFI_SHELLICONSIZE = &H4      ' sfi.hIcon is shell size (not system size), rtns BOOL
  SHGFI_PIDL = &H8                        ' pszPath is pidl, rtns BOOL
  ' Indicates that the function should not attempt to access the file specified by pszPath.
  ' Rather, it should act as if the file specified by pszPath exists with the file attributes
  ' passed in dwFileAttributes. This flag cannot be combined with the SHGFI_ATTRIBUTES,
  ' SHGFI_EXETYPE, or SHGFI_PIDL flags <---- !!!
  SHGFI_USEFILEATTRIBUTES = &H10   ' pretend pszPath exists, rtns BOOL
  SHGFI_ICON = &H100                    ' fills sfi.hIcon, rtns BOOL, use DestroyIcon
  SHGFI_DISPLAYNAME = &H200    ' isf.szDisplayName is filled (SHGDN_NORMAL), rtns BOOL
  SHGFI_TYPENAME = &H400          ' isf.szTypeName is filled, rtns BOOL
  SHGFI_ATTRIBUTES = &H800         ' rtns IShellFolder::GetAttributesOf  SFGAO_* flags
  SHGFI_ICONLOCATION = &H1000   ' fills sfi.szDisplayName with filename
                                                        ' containing the icon, rtns BOOL
  SHGFI_EXETYPE = &H2000            ' rtns two ASCII chars of exe type
  SHGFI_SYSICONINDEX = &H4000   ' sfi.iIcon is sys il icon index, rtns hImagelist
  SHGFI_LINKOVERLAY = &H8000    ' add shortcut overlay to sfi.hIcon
  SHGFI_SELECTED = &H10000        ' sfi.hIcon is selected icon
  SHGFI_ATTR_SPECIFIED = &H20000    ' get only attributes specified in sfi.dwAttributes
End Enum
Private Type SHFILEINFO   ' shfi
  hIcon As LongPtr
  iIcon As Long
  dwAttributes As Long
  szDisplayName As String * 260
  szTypeName As String * 80
End Type
'**************************
'Public functions

Public Sub PrebuildFullProcessCache()
'To optionally be called when loading, caches all currently running processes.
Dim tProcess As PROCESSENTRY32W
Dim hr As Long
Dim Retry As Boolean
Dim hSnapshot As LongPtr
Dim lErr As Long
hSnapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0&)

If hSnapshot Then
    tProcess.dwSize = LenB(tProcess)
    hr = Process32FirstW(hSnapshot, tProcess)
    If hr > 0& Then
        Do While hr > 0&
            ReDim Preserve ProcessCache(nCached)
            'SysReAllocStringLen VarPtr(ProcessCache(nCached).ProgName), VarPtr(tProcess.szExeFile(0)), lstrlenW(VarPtr(tProcess.szExeFile(0)))
            ProcessCache(nCached).ProgName = WCHARtoStr(tProcess.szExeFile)
            ProcessCache(nCached).CommandLine = vbNullString
            If ProcInfoGetCommandLine Then ProcessCache(nCached).CommandLine = GetProcessCommandLine(tProcess.th32ProcessID, ProcessCache(nCached).ProgName)
            ProcessCache(nCached).ProgName = ProcessCache(nCached).ProgName & ":" & CStr(tProcess.th32ProcessID)
            hr = GetProcessFullPath(tProcess.th32ProcessID, ProcessCache(nCached).FullPath)
            If hr Then
                'Error
                ProcessCache(nCached).FullPath = "0x" & Hex$(hr)
            End If
            ProcessCache(nCached).pid = tProcess.th32ProcessID
            ProcessCache(nCached).iIcon = GetFileIconIndex(ProcessCache(nCached).FullPath, SHGFI_SMALLICON)
            If ProcessCache(nCached).iIcon < 2& Then ProcessCache(nCached).iIcon = 2 'Default program icon
            nCached = nCached + 1
            hr = Process32NextW(hSnapshot, tProcess)
        Loop
    Else
        PostLog "Error calling Process32First, 0x" & Hex$(Err.LastDllError) & ", hSnapshot=" & hSnapshot
    End If
Else
    PostLog "Error creating process snapshot."
End If
End Sub

Public Sub InvalidateProcessCache()
ReDim ProcessCache(0)
nCached = 0&
End Sub

Public Sub EnsurePidCached(ByVal pid As Long)
If pid = -1& Then Exit Sub
Dim i As Long
If nCached Then
    For i = 0 To UBound(ProcessCache)
        If ProcessCache(i).pid = pid Then Exit Sub
    Next i
    LoadPID pid
End If
End Sub

Public Function GetProcessInfoFromPID(ByVal pid As Long, lpName As String, lpFullPath As String, lpIcon As Long, lpCommandLine As String) As Boolean
On Error GoTo e0
If ProcInfoNoCache Then
    LoadPIDDirect pid, lpName, lpFullPath, lpIcon, lpCommandLine
    Exit Function
Else
    If nCached = 0 Then
        If LoadPID(pid) Then
            lpName = ProcessCache(0).ProgName
            lpFullPath = ProcessCache(0).FullPath
            lpCommandLine = ProcessCache(0).CommandLine
            lpIcon = ProcessCache(0).iIcon
            GetProcessInfoFromPID = True
        End If
        Exit Function
    End If
    Dim i As Long
    For i = 0 To nCached - 1
        If ProcessCache(i).pid = pid Then
            lpName = ProcessCache(i).ProgName
            lpFullPath = ProcessCache(i).FullPath
            lpIcon = ProcessCache(i).iIcon
            lpCommandLine = ProcessCache(i).CommandLine
            GetProcessInfoFromPID = True
            Exit Function
        End If
    Next i
    'Not cached, try to load
    If LoadPID(pid) Then
        lpName = ProcessCache(UBound(ProcessCache)).ProgName
        lpFullPath = ProcessCache(UBound(ProcessCache)).FullPath
        lpIcon = ProcessCache(UBound(ProcessCache)).iIcon
        lpCommandLine = ProcessCache(UBound(ProcessCache)).CommandLine
        GetProcessInfoFromPID = True
    End If
    Exit Function
End If
e0:
PostLog "GetProcessInfoFromPID.Error->" & GetErrorName(Err.Number)
End Function

Public Function GetPidFromTidCTS(tid As Long) As Long
'Alternative for XP and possible access issues
GetPidFromTidCTS = -1&
Dim tThread As THREADENTRY32
Dim hr As Long
Dim hSnapshot As LongPtr

hSnapshot = CreateToolhelp32Snapshot(TH32CS_SNAPTHREAD, 0&)

If hSnapshot Then
    tThread.dwSize = LenB(tThread)
    hr = Thread32First(hSnapshot, tThread)
    If hr > 0& Then
        Do While hr > 0&
            If tThread.th32ThreadID = tid Then
                GetPidFromTidCTS = tThread.th32OwnerProcessID
                CloseHandle hSnapshot
                Exit Function
            End If
        Loop
    End If
    CloseHandle hSnapshot
End If
End Function

Private Function LoadPIDEx(pid As Long, Optional lTID As Long = 0&) As Boolean
'This method hadn't been used in VB6 version because getting x64 exe memory from an x86 process is
'*much* more complicated, and while possible, the project was already so complex.
ReDim Preserve ProcessCache(nCached)
If pid <= 0& Then
    ProcessCache(nCached).pid = -1&
    ProcessCache(nCached).ProgName = "<unknown>:-1"
    ProcessCache(nCached).iIcon = 2& 'Default
    nCached += 1
    Exit Function 'Invalid, system idle, and system process. Command line n/a.	
End If
If pid = 4& Then
    ProcessCache(nCached).pid = 4
    ProcessCache(nCached).ProgName = "[system]:4"
    ProcessCache(nCached).iIcon = 2& 'Default
    nCached += 1
    Exit Function 'Invalid, system idle, and system process. Command line n/a.	
End If
Dim tPEB As PEB
Dim tUPP As RTL_USER_PROCESS_PARAMETERS
Dim tPBI As PROCESS_BASIC_INFORMATION
Dim hProc As LongPtr
Dim status As Long
Dim dwSizeNeeded As Long
Dim cbRead As LongPtr
Dim sCmd As String
Dim sFull As String
Dim sFile As String

hProc = OpenProcess(PROCESS_QUERY_INFORMATION Or PROCESS_VM_READ, 0&, pid)
If hProc <> INVALID_HANDLE_VALUE Then
	status = NtQueryInformationProcess(hProc, ProcessBasicInformation, tPBI, LenB(tPBI), dwSizeNeeded)
    If tPBI.PebBaseAddress Then
        If ReadProcessMemory(hProc, tPBI.PebBaseAddress, tPEB, LenB(tPEB), cbRead) Then
        	cbRead = 0&
            If ReadProcessMemory(hProc, tPEB.ProcessParameters, tUPP, LenB(tUPP), cbRead) Then
                If tUPP.CommandLine.uLength Then
                    cbRead = 0&
                    Dim bstr() As Byte
                    ReDim bstr(tUPP.CommandLine.uLength - 1)
                    If ReadProcessMemory(hProc, tUPP.CommandLine.pBuffer, bstr(0), tUPP.CommandLine.uLength, cbRead) Then
                        sCmd = bstr
                    End If
                Else
                	PostLog "CmdLineLen=0 for " & pid
                End If
                If tUPP.ImagePathName.uLength Then
                    PostLog "ResolveStr " & tUPP.ImagePathName.uLength & ",max=" & tUPP.ImagePathName.uMaximumLength
                    Form1.UpdateLog
                    cbRead = 0&
                    Dim bstr2() As Byte
                    ReDim bstr2(tUPP.ImagePathName.uLength - 1)
                    If ReadProcessMemory(hProc, tUPP.ImagePathName.pBuffer, bstr2(0), tUPP.ImagePathName.uLength, cbRead) Then
                        sFull = bstr
                        PostLog "read=" & cbRead & ",sFull=" & sFull
                        'This returns the NT path... but fortunately, this project already had to handle that.
                        sFull = ConvertNtPathToDosPath(sFull)
                    End If
                Else
                	PostLog "ImagePathLen=0 for " & pid
                End If
            Else
                PostLog "Failed to read process params for " & pid
            End If
        Else
            PostLog "Failed to read PEB for " & pid
        End If
    Else
        PostLog "Failed to obtain PebBaseAddress for " & hProc & ", status=0x" & Hex(status)
    End If
    CloseHandle hProc
Else
    PostLog "Failed to open process " & pid & ", err=0x" & Hex$(Err.LastDllError)
End If
End Function
Private Function LoadPID(pid As Long, Optional lTID As Long = 0&) As Boolean
On Error GoTo LoadPID_Err
Dim tProcess As PROCESSENTRY32W
Dim hr As Long
Dim Retry As Boolean
Dim hSnapshot As LongPtr

hSnapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0&)

If hSnapshot Then
    tProcess.dwSize = LenB(tProcess)
    hr = Process32FirstW(hSnapshot, tProcess)
    If hr > 0& Then
        Do While hr > 0&
            If tProcess.th32ProcessID = pid Then
                ReDim Preserve ProcessCache(nCached)
                'SysReAllocStringLen VarPtr(ProcessCache(nCached).ProgName), VarPtr(tProcess.szExeFile(0)), lstrlenW(VarPtr(tProcess.szExeFile(0)))
                ProcessCache(nCached).ProgName = WCHARtoStr(tProcess.szExeFile)
                If ProcInfoGetCommandLine Then
                    ProcessCache(nCached).CommandLine = GetProcessCommandLine(tProcess.th32ProcessID, ProcessCache(nCached).ProgName)
                Else
                	ProcessCache(nCached).CommandLine = vbNullString
                End If
                ProcessCache(nCached).ProgName = ProcessCache(nCached).ProgName & ":" & CStr(pid)
                hr = GetProcessFullPath(pid, ProcessCache(nCached).FullPath)
                If hr Then
                    'Error
                    ProcessCache(nCached).FullPath = "0x" & Hex$(hr)
                End If
                ProcessCache(nCached).pid = pid
                ProcessCache(nCached).iIcon = GetFileIconIndex(ProcessCache(nCached).FullPath, SHGFI_SMALLICON)
                If ProcessCache(nCached).iIcon < 2& Then ProcessCache(nCached).iIcon = 2& 'Default program icon
                nCached = nCached + 1&
                LoadPID = True
                CloseHandle hSnapshot
                Exit Function
            End If
            hr = Process32NextW(hSnapshot, tProcess)
        Loop
        'Process not found.
        ReDim Preserve ProcessCache(nCached)
        If pid = -1& Then
            ProcessCache(nCached).ProgName = "<unknown>:" & CStr(pid)
            ProcessCache(nCached).pid = pid
            ProcessCache(nCached).iIcon = 2& 'Default program icon
            nCached = nCached + 1&
        Else
            'We have a seemingly valid pid, try an alternative.
            Dim hProc As Long
            hr = GetProcessFullPath(pid, ProcessCache(nCached).FullPath)
            If hr Then
                'Error
                If pid <= 0& Then
                    PostLog "Non-error, non-zero Pid not found in snapshot; error querying full path " & GetErrorName(hr)
                End If
                ProcessCache(nCached).ProgName = "<unknown>:" & CStr(pid)
                ProcessCache(nCached).pid = pid
                ProcessCache(nCached).iIcon = 2& 'Default program icon
                nCached = nCached + 1
               
            Else
                PostLog "Identified unknown process through GetProcessFullPath, pid=" & pid & ",path=" & ProcessCache(nCached).FullPath
                ProcessCache(nCached).ProgName = ProcessCache(nCached).FullPath & ":" & CStr(pid)
                ProcessCache(nCached).pid = pid
                ProcessCache(nCached).iIcon = 2& 'Default program icon
                nCached = nCached + 1
                
            End If
        
        End If
        LoadPID = True
        CloseHandle hSnapshot
        Exit Function
        
    Else
        PostLog "LoadPID->Process32First failed."
    End If
Else
    PostLog "LoadPID->Failed to create snapshot."
End If

CloseHandle hSnapshot
    
Exit Function

LoadPID_Err:
    PostLog "LoadPID.Error->" & Err.Description & ", 0x" & Hex$(Err.Number)
End Function

Private Function LoadPIDDirect(pid As Long, pName As String, pPath As String, pIcon As Long, pCmd As String) As Boolean
'Gets pid info without caching
On Error GoTo LoadPID_Err
Dim tProcess As PROCESSENTRY32W
Dim hr As Long
Dim Retry As Boolean
Dim hSnapshot As LongPtr

hSnapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0&)

If hSnapshot Then
    tProcess.dwSize = LenB(tProcess)
    hr = Process32FirstW(hSnapshot, tProcess)
    If hr > 0& Then
        Do While hr > 0&
            If tProcess.th32ProcessID = pid Then
                pName = WCHARtoStr(tProcess.szExeFile)
                pName = pName & ":" & CStr(pid)
                hr = GetProcessFullPath(pid, pPath)
                If hr Then
                    'Error
                    pPath = "0x" & Hex$(hr)
                End If
                pIcon = GetFileIconIndex(pPath, SHGFI_SMALLICON)
                If ProcInfoGetCommandLine Then
                    pCmd = GetProcessCommandLine(tProcess.th32ProcessID, ProcessCache(nCached).ProgName)
                Else
                    pCmd = vbNullString
                End If
                If pIcon < 2& Then pIcon = 2 'Default program icon
                LoadPIDDirect = True
                CloseHandle hSnapshot
                Exit Function
            End If
            hr = Process32NextW(hSnapshot, tProcess)
        Loop
        'Process not found.
        If pid = -1& Then
            pName = "<unknown>:" & CStr(pid)
            pIcon = 2 'Default program icon
        Else
            'We have a seemingly valid pid, try an alternative.
            Dim hProc As Long
            hr = GetProcessFullPath(pid, pPath)
            If hr Then
                'Error
                If pid <> -1& Then
                    PostLog "Non-error Pid not found in snapshot; error querying full path " & GetErrorName(hr)
                End If
                pName = "<unknown>:" & CStr(pid)
                pIcon = 2 'Default program icon
            Else
                PostLog "Identified unknown process through GetProcessFullPath, pid=" & pid & ",path=" & pPath
                pName = pPath & ":" & CStr(pid)
                pIcon = 2 'Default program icon
            End If
        
        End If
        LoadPIDDirect = True
        CloseHandle hSnapshot
        Exit Function
        
    Else
        PostLog "LoadPID->Process32First failed."
    End If
Else
    PostLog "LoadPID->Failed to create snapshot."
End If

CloseHandle hSnapshot
    
Exit Function

LoadPID_Err:
    PostLog "LoadPIDDirect.Error->" & Err.Description & ", 0x" & Hex$(Err.Number)
End Function

Private Function GetProcessFullPath(pid As Long, pPath As String) As Long
On Error GoTo GetProcessFullPath_Err
Dim hProc As LongPtr
Dim sBuf As String
Dim cb As Long
Dim lErr As Long
hProc = OpenProcess(PROCESS_QUERY_LIMITED_INFORMATION, 0&, pid)
lErr = Err.LastDllError
If hProc Then
    sBuf = String$(MAX_PATH_DOS, 0)
    Dim hr As Long
    cb = MAX_PATH_DOS
    hr = QueryFullProcessImageName(hProc, 0&, StrPtr(sBuf), cb)
    lErr = Err.LastDllError
    If hr Then
        pPath = Left$(sBuf, cb)
    Else
        GetProcessFullPath = lErr
    End If
Else
    GetProcessFullPath = lErr
End If

Exit Function

GetProcessFullPath_Err:
    PostLog "GetProcessFullPath.Error->" & Err.Description & ", 0x" & Hex$(Err.Number)
End Function

Public Function GetProcessCommandLine(pid As Long, sProc As String) As String
GetProcessCommandLine = " "
If (pid <= 0&) Or (pid = 4&) Then Exit Function 'Invalid, system idle, and system process. Command line n/a.
Dim tPEB As PEB
Dim tUPP As RTL_USER_PROCESS_PARAMETERS
Dim tPBI As PROCESS_BASIC_INFORMATION
Dim hProc As LongPtr
Dim status As Long
Dim dwSizeNeeded As Long
Dim cbRead As LongPtr
Dim sOut As String

hProc = OpenProcess(PROCESS_QUERY_INFORMATION Or PROCESS_VM_READ, 0&, pid)
If hProc > 0 Then
	status = NtQueryInformationProcess(hProc, ProcessBasicInformation, tPBI, LenB(tPBI), dwSizeNeeded)
    If tPBI.PebBaseAddress Then
        If ReadProcessMemory(hProc, tPBI.PebBaseAddress, tPEB, LenB(tPEB), cbRead) Then
        	cbRead = 0&
            If ReadProcessMemory(hProc, tPEB.ProcessParameters, tUPP, LenB(tUPP), cbRead) Then
                If tUPP.CommandLine.uLength Then
                    cbRead = 0&
                    Dim bstr() As Byte
                    ReDim bstr(tUPP.CommandLine.uLength - 1)
                    If ReadProcessMemory(hProc, tUPP.CommandLine.pBuffer, bstr(0), tUPP.CommandLine.uLength, cbRead) Then
                        sOut = bstr
                        'PostLog "read=" & cbRead & ",sOut=" & sOut
                        Return sOut
                    End If
                Else
                	PostLog "CmdLineLen=0 for " & sProc
                End If
            Else
                PostLog "Failed to read process params for " & sProc
            End If
        Else
            PostLog "Failed to read PEB for " & sProc
        End If
    Else
        PostLog "Failed to obtain PebBaseAddress for " & hProc & ", status=0x" & Hex(status)
    End If
    CloseHandle hProc
Else
    PostLog "Failed to open process " & sProc & ", err=0x" & Hex$(Err.LastDllError)
End If

End Function

Public Function GetFileIconIndex(Path As String, uType As Long) As Long
  Dim sfi As SHFILEINFO
If SHGetFileInfo(Path, ByVal 0&, sfi, Len(sfi), SHGFI_SYSICONINDEX Or SHGFI_SMALLICON Or SHGFI_TYPENAME) Then
    GetFileIconIndex = sfi.iIcon
  End If
End Function
Public Sub dbg_DumpCache()
	Dim i As Long
    If nCached Then
        For i = 0 To nCached - 1
            PostLog "pid(" & ProcessCache(i).pid & ")=" & ProcessCache(i).ProgName
        Next i
    End If
End Sub

End Module


